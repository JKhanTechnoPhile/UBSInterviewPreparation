package com.jk

//fun main() {
//    val human = Human()
//    human.age = 35
//    human.age
//}

var propertyName: String = "Javeed Khan H"
    get
    set

val simple
    get() = 100

class RectangleProperties(val width: Int, val height: Int) {
//    val area: Int
//        get() = width*height
val area get() = width*height
}

var stringRepresentation: String
    get() = "this.toString()"
    set(value) {
//        setDataFromString(value)
    }

//  Backing Fields
//  https://www.youtube.com/watch?v=H5TYt3ZlS0Q&t=344s
/*
1. Backing field is represented by 'field' keyword. It just stores the value of its own property.
2. It is used because usage of property name with in its getter or setter throws "StackOverflow" exception.
3. The backing field is generated by kotlin internally only when it is used in code.
4. Backing field can never be used in any other methods apart from getter and setter
 */
var counter = 0
    get() {
//        println("Counter: $counter")
        println("Counter: $field")
        return field
    }
    set(value) {
        if (value > 0)
            field = value
    }
class Human {
    var age = 20
        get() {
//            println("Age.age: $age")
            println("get.field: $field")
            return field
        }
        set(value) {
            field = value
            println("set.field: $field")
//            age = value
        }
}

//  Backing Property
//  https://www.youtube.com/watch?v=_yiYMn4YIzg
fun main() {
    val student = Student()
    student.addHobby("Cricket")

//    Accidental deletion of data: we don't want this
//    student.hobbies.remove("Cricket")
}

//class Student {
//    val hobbies = mutableListOf<String>()
//
//    fun addHobby(hobbyName: String) {
//        hobbies.add(hobbyName)
//    }
//}

//  Alternate safe code using backing property
class Student {
    private val _hobbies = mutableListOf<String>()  //backing field
    val hobbies: List<String>   // backing property: immutable
        get() = _hobbies

    fun addHobby(hobbyName: String) {
        _hobbies.add(hobbyName)
    }
}


//Compile-time constant ( Type: String , any primitive value )
private const val COMPILE_TIME_CONSTANT_TOP_LEVEL_PROPERTY = "Compile-time constant"

object CompileTimeConstant {
    private const val COMPILE_TIME_CONSTANT_MEMBER_OF_OBJECT = "Compile-time constant"
}

class CompileTimeConstantCompanion {
    companion object {
        private const val COMPILE_TIME_CONSTANT_MEMBER_OF_OBJECT = "Compile-time constant"
    }
}

//  Late-initialized properties and variables
class MyTest {
    private lateinit var subject: TestSubject // The type of property or variable must be non-null and it must not be a primitive type

    init {
        subject = TestSubject()
    }

    fun test() {
//        if (subject.isInitialized){
//            subject.toString()
//        }
    }
}

class TestSubject